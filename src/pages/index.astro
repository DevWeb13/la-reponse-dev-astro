---
//src/pages/index.astro
import { getCollection } from 'astro:content'

// Layout import — provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro'

// Component Imports
import CallToAction from '../components/CallToAction.astro'
import Grid from '../components/Grid.astro'
import Hero from '../components/Hero.astro'
import Icon from '../components/Icon.astro'
import Pill from '../components/Pill.astro'
import PortfolioPreview from '../components/PortfolioPreview.astro'

// Page section components
import ContactCTA from '../components/ContactCTA.astro'
import DonateCTA from '../components/DonateCTA.astro'
import Skills from '../components/Skills.astro'

// Content Fetching: List four most recent work projects
const projects = (await getCollection('work'))
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
    .slice(0, 4)

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<BaseLayout
    title="Giuliano Loic | Développeur Web Freelance à Marseille"
    description="Développeur web freelance à Marseille spécialisé dans la création de sites et applications web performants. Expert en React, Next.js, Astro et Qwik. Optimisation SEO et performance."
>
    <div class="stack gap-8 lg:gap-20">
        <main class="wrapper stack gap-20 lg:gap-48">
            <header class="hero">
                <Hero
                    title="Salut, je suis Giuliano Loic"
                    tagline="Je suis un développeur web à Marseille, France."
                    align="start"
                >
                    <div class="roles">
                        <Pill
                            ><Icon icon="code" size="1.33em" />
                            Développeur Web
                        </Pill>
                        <Pill
                            ><Icon icon="devices" size="1.33em" />
                            Multi-plateforme
                        </Pill>
                        <Pill
                            ><Icon icon="gauge" size="1.33em" />
                            Performance
                        </Pill>
                    </div>
                </Hero>

                <div class="model-container">
                    <div id="fallbackImage" class="fallback-image">
                        <img
                            src="/assets/models/poster.webp"
                            alt="Avatar 3D interactif de Giuliano Loic, développeur web freelance à Marseille"
                            loading="lazy"
                            fetchpriority="low"
                        />
                        <button id="loadModel" class="load-model-btn">
                            Charger le modèle 3D
                        </button>
                    </div>
                    <div id="modelViewerWrapper"></div>
                </div>

                <!-- <img src="/assets/IMG_0960.GIF" alt="Description du GIF"> -->
            </header>

            <Skills />

            <section class="section with-background with-cta">
                <header class="section-header stack gap-2 lg:gap-4">
                    <h3>Quelques projets</h3>
                    <p>
                        Visualisez quelques-uns de mes projets récents
                        ci-dessous.
                    </p>
                </header>

                <div class="gallery">
                    <Grid variant="offset">
                        {
                            projects.map((project) => (
                                <li>
                                    <PortfolioPreview project={project} />
                                </li>
                            ))
                        }
                    </Grid>
                </div>

                <div class="cta">
                    <CallToAction href="/work/">
                        Voir plus de projets
                        <Icon icon="arrow-right" size="1.2em" />
                    </CallToAction>
                </div>
            </section>

            <!-- <section class="section with-background bg-variant">
                <header class="section-header stack gap-2 lg:gap-4">
                    <h3>Mentions</h3>
                    <p>
                        I have been fortunate enough to receive praise for my
                        work in several publications. Take a look below to learn
                        more.
                    </p>
                </header>

                <div class="gallery">
                    <Grid variant="small">
                        {
                            [
                                'Medium',
                                'BuzzFeed',
                                'The Next Web',
                                'awwwards.',
                                'TechCrunch',
                            ].map((brand) => (
                                <li class="mention-card">
                                    <p>{brand}</p>
                                </li>
                            ))
                        }
                    </Grid>
                </div>
            </section> -->
        </main>

        <ContactCTA />
        <DonateCTA />
    </div>
</BaseLayout>

<script>
    interface CustomModelViewerElement extends HTMLElement {
        play: ({ repetitions }: { repetitions: number }) => void
        animationName: string
        updateComplete: Promise<void>
    }

    document.addEventListener('DOMContentLoaded', () => {
        const fallbackImage = document.getElementById(
            'fallbackImage'
        ) as HTMLDivElement
        const loadModelBtn = document.getElementById(
            'loadModel'
        ) as HTMLButtonElement
        const modelViewerWrapper = document.getElementById(
            'modelViewerWrapper'
        ) as HTMLDivElement
        const animations = ['Idle', 'ArmStretching']
        let i = 0
        let isHovered = false

        if (!fallbackImage || !loadModelBtn || !modelViewerWrapper) return

        function loadModelViewerScript(): Promise<void> {
            return new Promise((resolve, reject) => {
                if (
                    window.customElements &&
                    customElements.get('model-viewer')
                ) {
                    resolve()
                    return
                }
                const script = document.createElement('script')
                script.type = 'module'
                script.src =
                    'https://ajax.googleapis.com/ajax/libs/model-viewer/3.4.0/model-viewer.min.js'
                script.onload = () => resolve()
                script.onerror = () => reject()
                document.head.appendChild(script)
            })
        }

        function createModelViewer(): CustomModelViewerElement {
            const modelViewer = document.createElement(
                'model-viewer'
            ) as CustomModelViewerElement
            modelViewer.id = 'monModelViewer'
            modelViewer.setAttribute('src', '/assets/models/myAvatar.glb')
            modelViewer.setAttribute('ar-scale', 'fixed')
            modelViewer.setAttribute('camera-controls', '')
            modelViewer.setAttribute('touch-action', 'pan-y')
            modelViewer.setAttribute(
                'alt',
                'Avatar 3D interactif de Giuliano Loic, développeur web freelance à Marseille'
            )
            modelViewer.setAttribute('shadow-intensity', '2')
            modelViewer.setAttribute(
                'skybox-image',
                '/assets/models/rostock_laage_airport_1k.hdr'
            )
            modelViewer.setAttribute('skybox-height', '1.5m')
            modelViewer.setAttribute('max-camera-orbit', 'auto 90deg auto')
            modelViewer.setAttribute(
                'ios-src',
                '../../shared-assets/models/Astronaut.usdz'
            )
            modelViewer.setAttribute('xr-environment', '')
            modelViewer.setAttribute('tone-mapping', 'commerce')
            modelViewer.setAttribute('animation-name', 'Hello')
            modelViewer.setAttribute('ar-modes', 'webxr scene-viewer')
            modelViewer.setAttribute('poster', '/assets/models/poster.webp')
            modelViewer.setAttribute('loading', 'lazy')
            modelViewer.setAttribute('reveal', 'auto')
            modelViewer.setAttribute('reveal-when-loaded', '')
            modelViewer.setAttribute('auto-rotate', '')
            modelViewer.setAttribute('rotation-per-second', '5deg')
            modelViewer.setAttribute('interaction-prompt', 'auto')
            modelViewer.setAttribute('interaction-prompt-style', 'basic')
            modelViewer.setAttribute('interaction-prompt-threshold', '0')
            modelViewer.setAttribute('camera-orbit', '0deg 75deg 50%')
            modelViewer.setAttribute('min-camera-orbit', 'auto auto 50%')
            modelViewer.setAttribute('max-camera-orbit', 'auto auto 150%')
            modelViewer.setAttribute('camera-target', '0 1.5m 0')
            modelViewer.setAttribute('field-of-view', '30deg')
            modelViewer.setAttribute('min-field-of-view', '25deg')
            modelViewer.setAttribute('max-field-of-view', '45deg')
            modelViewer.setAttribute('interpolation-decay', '200')
            modelViewer.setAttribute('touch-action', 'pan-y')

            modelViewer.setAttribute('disable-pan', '')
            modelViewer.setAttribute('disable-tap', '')
            modelViewer.setAttribute('auto-rotate-delay', '2000')

            modelViewer.style.width = '100%'
            modelViewer.style.height = '100%'
            return modelViewer
        }

        function attachModelViewerEvents(
            modelViewer: CustomModelViewerElement
        ) {
            const play = async () => {
                if (!modelViewer) return
                if (
                    isHovered &&
                    modelViewer.animationName === 'ArmStretching'
                ) {
                    return
                }
                modelViewer.animationName = animations[i++ % animations.length]
                await modelViewer.updateComplete
                modelViewer.play({ repetitions: 1 })
            }

            const playHello = async () => {
                if (!modelViewer) return
                if (modelViewer.animationName !== 'ArmStretching') {
                    modelViewer.animationName = 'Hello'
                    await modelViewer.updateComplete
                    modelViewer.play({ repetitions: 1 })
                    i = 0
                } else {
                    modelViewer.addEventListener(
                        'finished',
                        () => {
                            if (isHovered) {
                                modelViewer.animationName = 'Hello'
                                modelViewer.updateComplete.then(() => {
                                    modelViewer.play({ repetitions: 1 })
                                })
                                i = 0
                            }
                        },
                        { once: true }
                    )
                }
            }

            modelViewer.addEventListener('load', play)
            modelViewer.addEventListener('finished', play)

            modelViewer.addEventListener('mouseenter', () => {
                isHovered = true
                playHello()
            })

            modelViewer.addEventListener('mouseleave', () => {
                isHovered = false
            })

            const handleMobileInteraction = () => {
                isHovered = true
                playHello()
                setTimeout(() => (isHovered = false), 1000)
            }

            modelViewer.addEventListener('touchstart', handleMobileInteraction)
            modelViewer.addEventListener('click', handleMobileInteraction)
        }

        loadModelBtn.addEventListener('click', async () => {
            loadModelBtn.disabled = true
            loadModelBtn.textContent = 'Chargement...'
            await loadModelViewerScript()
            const modelViewer = createModelViewer()
            attachModelViewerEvents(modelViewer)
            fallbackImage.style.display = 'none'
            modelViewerWrapper.appendChild(modelViewer)
        })
    })
</script>

<style>
    .hero {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }

    .roles {
        display: none;
    }

    .hero model-viewer {
        aspect-ratio: 5 / 4;
        object-fit: cover;
        object-position: top;
        border-radius: 1.5rem;
        box-shadow: var(--shadow-md);
        width: 100%;
        height: 100%;
        max-width: 500px;
    }

    @media (min-width: 50em) {
        .hero {
            display: grid;
            grid-template-columns: 6fr 4fr;
            padding-inline: 2.5rem;
            gap: 3.75rem;
        }

        .roles {
            margin-top: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }

        .hero img {
            aspect-ratio: 3 / 4;
            border-radius: 4.5rem;
            object-fit: cover;
        }
    }

    /* ====================================================== */

    .section {
        display: grid;
        gap: 2rem;
    }

    .with-background {
        position: relative;
    }

    .with-background::before {
        --hero-bg: var(--bg-image-subtle-2);

        content: '';
        position: absolute;
        pointer-events: none;
        left: 50%;
        width: 100vw;
        aspect-ratio: calc(2.25 / var(--bg-scale));
        top: 0;
        transform: translateY(-75%) translateX(-50%);
        background:
            url('/assets/backgrounds/noise.webp') top center/220px repeat,
            var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
            var(--gray-999);
        background-blend-mode: overlay, normal, normal, normal;
        mix-blend-mode: var(--bg-blend-mode);
        z-index: -1;
    }

    .with-background.bg-variant::before {
        --hero-bg: var(--bg-image-subtle-1);
    }

    .section-header {
        justify-self: center;
        text-align: center;
        max-width: 50ch;
        font-size: var(--text-md);
        color: var(--gray-300);
    }

    .section-header h3 {
        font-size: var(--text-2xl);
    }

    @media (min-width: 50em) {
        .section {
            grid-template-columns: repeat(4, 1fr);
            grid-template-areas: 'header header header header' 'gallery gallery gallery gallery';
            gap: 5rem;
        }

        .section.with-cta {
            grid-template-areas: 'header header header cta' 'gallery gallery gallery gallery';
        }

        .section-header {
            grid-area: header;
            font-size: var(--text-lg);
        }

        .section-header h3 {
            font-size: var(--text-4xl);
        }

        .with-cta .section-header {
            justify-self: flex-start;
            text-align: left;
        }

        .gallery {
            grid-area: gallery;
        }

        .cta {
            grid-area: cta;
        }
    }

    /* ====================================================== */

    .mention-card {
        display: flex;
        height: 7rem;
        justify-content: center;
        align-items: center;
        text-align: center;
        border: 1px solid var(--gray-800);
        border-radius: 1.5rem;
        color: var(--gray-300);
        background: var(--gradient-subtle);
        box-shadow: var(--shadow-sm);
    }

    @media (min-width: 50em) {
        .mention-card {
            border-radius: 1.5rem;
            height: 9.5rem;
        }
    }

    .model-container {
        position: relative;
        aspect-ratio: 5 / 4;
        width: 100%;
        max-width: 500px;
        border-radius: 1.5rem;
        box-shadow: var(--shadow-md);
        overflow: hidden;
        height: auto;
    }

    #modelViewerWrapper {
        width: 100%;
        height: 100%;
        position: absolute;
        inset: 0;
        display: flex;
        align-items: stretch;
        justify-content: stretch;
        z-index: 1;
    }

    .fallback-image {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background: #18142a;
        z-index: 2;
    }

    .fallback-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        background: #18142a;
    }

    .load-model-btn {
        position: absolute;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 0.5rem 1rem;
        background: var(--accent-regular);
        color: var(--accent-text-over);
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .load-model-btn:hover {
        background: var(--accent-hover);
    }

    .model-container model-viewer {
        aspect-ratio: 5 / 4;
        object-fit: cover;
        object-position: top;
        border-radius: 1.5rem;
        box-shadow: var(--shadow-md);
        width: 100%;
        height: 100%;
        max-width: 500px;
    }
</style>

<script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Person",
        "name": "Giuliano Loic",
        "url": "https://www.lareponsedev.com",
        "jobTitle": "Développeur Web Freelance",
        "worksFor": {
            "@type": "Organization",
            "name": "LaReponseDev"
        },
        "address": {
            "@type": "PostalAddress",
            "addressLocality": "Marseille",
            "addressCountry": "FR"
        },
        "sameAs": ["https://twitter.com/DeveloppementW1"]
    }
</script>
