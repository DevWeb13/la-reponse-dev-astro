---
import { getCollection } from 'astro:content'

// Layout import — provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro'

// Component Imports
import CallToAction from '../components/CallToAction.astro'
import Grid from '../components/Grid.astro'
import Hero from '../components/Hero.astro'
import Icon from '../components/Icon.astro'
import Pill from '../components/Pill.astro'
import PortfolioPreview from '../components/PortfolioPreview.astro'

// Page section components
import ContactCTA from '../components/ContactCTA.astro'
import Skills from '../components/Skills.astro'

// Content Fetching: List four most recent work projects
const projects = (await getCollection('work'))
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
    .slice(0, 4)

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<BaseLayout>
    <div class="stack gap-20 lg:gap-48">
        <div class="wrapper stack gap-8 lg:gap-20">
            <header class="hero">
                <Hero
                    title="Salut, je suis Giuliano Loic"
                    tagline="Je suis un développeur web à Marseille, France."
                    align="start"
                >
                    <div class="roles">
                        <Pill
                            ><Icon icon="code" size="1.33em" />
                            Développeur Web
                        </Pill>
                        <Pill
                            ><Icon icon="devices" size="1.33em" />
                            Multi-plateforme
                        </Pill>
                        <Pill
                            ><Icon icon="gauge" size="1.33em" />
                            Performance
                        </Pill>
                    </div>
                </Hero>

                <model-viewer
                    id="monModelViewer"
                    src="/assets/models/myAvatar.glb"
                    ar-scale="fixed"
                    camera-controls
                    touch-action="pan-y"
                    alt="A 3D model of an astronaut"
                    shadow-intensity="2"
                    skybox-image="/assets/models/rostock_laage_airport_1k.hdr"
                    skybox-height="1.5m"
                    max-camera-orbit="auto 90deg auto"
                    ios-src="../../shared-assets/models/Astronaut.usdz"
                    xr-environment
                    tone-mapping="commerce"
                    animation-name="Hello"
                    ar-modes="webxr scene-viewer"
                    poster="/assets/models/poster.webp"></model-viewer>

                <!-- <img src="/assets/IMG_0960.GIF" alt="Description du GIF"> -->
            </header>

            <Skills />
        </div>

        <ins
            class="adsbygoogle"
            style="display:block;margin: 0 1rem;"
            data-ad-format="fluid"
            data-ad-layout-key="-fb+5w+4e-db+86"
            data-ad-client="ca-pub-2091224773462896"
            data-ad-slot="7686452084"></ins>
        <script type="text/javascript">
            ;(adsbygoogle = window.adsbygoogle || []).push({})
        </script>

        <ins
            class="adsbygoogle"
            style="display:block"
            data-ad-format="fluid"
            data-ad-layout-key="-fb+5w+4e-db+86"
            data-ad-client="ca-pub-2091224773462896"
            data-ad-slot="7686452084"></ins>
        <script type="text/javascript">
            ;(adsbygoogle = window.adsbygoogle || []).push({})
        </script>

        <main class="wrapper stack gap-20 lg:gap-48">
            <section class="section with-background with-cta">
                <header class="section-header stack gap-2 lg:gap-4">
                    <h3>Quelques projets</h3>
                    <p>
                        Visualisez quelques-uns de mes projets récents
                        ci-dessous.
                    </p>
                </header>

                <div class="gallery">
                    <Grid variant="offset">
                        {
                            projects.map((project) => (
                                <li>
                                    <PortfolioPreview project={project} />
                                </li>
                            ))
                        }
                    </Grid>
                </div>

                <div class="cta">
                    <CallToAction href="/work/">
                        Voir plus de projets
                        <Icon icon="arrow-right" size="1.2em" />
                    </CallToAction>
                </div>
            </section>

            <!-- <section class="section with-background bg-variant">
                <header class="section-header stack gap-2 lg:gap-4">
                    <h3>Mentions</h3>
                    <p>
                        I have been fortunate enough to receive praise for my
                        work in several publications. Take a look below to learn
                        more.
                    </p>
                </header>

                <div class="gallery">
                    <Grid variant="small">
                        {
                            [
                                'Medium',
                                'BuzzFeed',
                                'The Next Web',
                                'awwwards.',
                                'TechCrunch',
                            ].map((brand) => (
                                <li class="mention-card">
                                    <p>{brand}</p>
                                </li>
                            ))
                        }
                    </Grid>
                </div>
            </section> -->
        </main>

        <ContactCTA />
    </div>
</BaseLayout>

<script>
    interface CustomModelViewerElement extends HTMLElement {
        play: ({ repetitions }: { repetitions: number }) => void
        animationName: string
        updateComplete: Promise<void>
        // Ajouter d'autres propriétés et méthodes spécifiques ici
    }
    const modelViewer: CustomModelViewerElement | null =
        document.querySelector('#monModelViewer')
    const animations = ['Idle', 'ArmStretching']

    let i = 0
    let isHovered = false // Flag pour suivre l'état de survol

    const play = async () => {
        if (!modelViewer) return
        if (isHovered && modelViewer.animationName === 'ArmStretching') {
            // Attendre la fin de l'animation ArmStretching si survolé
            return
        }

        modelViewer.animationName = animations[i++ % animations.length]
        await modelViewer.updateComplete
        modelViewer.play({ repetitions: 1 })
    }

    const playHello = async () => {
        if (!modelViewer) return
        // Jouer l'animation "Hello" si ce n'est pas pendant "ArmStretching"
        if (modelViewer.animationName !== 'ArmStretching') {
            modelViewer.animationName = 'Hello'
            await modelViewer.updateComplete
            modelViewer.play({ repetitions: 1 })
            i = 0 // Réinitialiser l'index pour la prochaine fois
        } else {
            // Attendre la fin de "ArmStretching" puis jouer "Hello"
            modelViewer.addEventListener(
                'finished',
                () => {
                    if (isHovered) {
                        modelViewer.animationName = 'Hello'
                        modelViewer.updateComplete.then(() => {
                            modelViewer.play({ repetitions: 1 })
                        })
                        i = 0 // Réinitialiser l'index pour la prochaine fois
                    }
                },
                { once: true }
            ) // Utiliser 'once' pour que l'écouteur se retire après exécution
        }
    }

    modelViewer?.addEventListener('load', play)
    modelViewer?.addEventListener('finished', play)

    // Gestion du survol
    modelViewer?.addEventListener('mouseenter', () => {
        isHovered = true
        playHello()
    })

    modelViewer?.addEventListener('mouseleave', () => {
        isHovered = false
    })

    // Fonction pour gérer le clic ou le toucher sur mobile
    const handleMobileInteraction = () => {
        isHovered = true // Vous pouvez choisir de traiter un clic comme un survol
        playHello()
        setTimeout(() => (isHovered = false), 1000) // Réinitialiser après un délai si nécessaire
    }

    // Ajout du gestionnaire d'événements pour les clics sur mobile
    modelViewer?.addEventListener('touchstart', handleMobileInteraction)
    modelViewer?.addEventListener('click', handleMobileInteraction)
</script>

<style>
    .hero {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }

    .roles {
        display: none;
    }

    .hero model-viewer {
        aspect-ratio: 5 / 4;
        object-fit: cover;
        object-position: top;
        border-radius: 1.5rem;
        box-shadow: var(--shadow-md);
        width: 100%;
        height: 100%;
        max-width: 500px;
    }

    @media (min-width: 50em) {
        .hero {
            display: grid;
            grid-template-columns: 6fr 4fr;
            padding-inline: 2.5rem;
            gap: 3.75rem;
        }

        .roles {
            margin-top: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }

        .hero img {
            aspect-ratio: 3 / 4;
            border-radius: 4.5rem;
            object-fit: cover;
        }
    }

    /* ====================================================== */

    .section {
        display: grid;
        gap: 2rem;
    }

    .with-background {
        position: relative;
    }

    .with-background::before {
        --hero-bg: var(--bg-image-subtle-2);

        content: '';
        position: absolute;
        pointer-events: none;
        left: 50%;
        width: 100vw;
        aspect-ratio: calc(2.25 / var(--bg-scale));
        top: 0;
        transform: translateY(-75%) translateX(-50%);
        background:
            url('/assets/backgrounds/noise.png') top center/220px repeat,
            var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
            var(--gray-999);
        background-blend-mode: overlay, normal, normal, normal;
        mix-blend-mode: var(--bg-blend-mode);
        z-index: -1;
    }

    .with-background.bg-variant::before {
        --hero-bg: var(--bg-image-subtle-1);
    }

    .section-header {
        justify-self: center;
        text-align: center;
        max-width: 50ch;
        font-size: var(--text-md);
        color: var(--gray-300);
    }

    .section-header h3 {
        font-size: var(--text-2xl);
    }

    @media (min-width: 50em) {
        .section {
            grid-template-columns: repeat(4, 1fr);
            grid-template-areas: 'header header header header' 'gallery gallery gallery gallery';
            gap: 5rem;
        }

        .section.with-cta {
            grid-template-areas: 'header header header cta' 'gallery gallery gallery gallery';
        }

        .section-header {
            grid-area: header;
            font-size: var(--text-lg);
        }

        .section-header h3 {
            font-size: var(--text-4xl);
        }

        .with-cta .section-header {
            justify-self: flex-start;
            text-align: left;
        }

        .gallery {
            grid-area: gallery;
        }

        .cta {
            grid-area: cta;
        }
    }

    /* ====================================================== */

    .mention-card {
        display: flex;
        height: 7rem;
        justify-content: center;
        align-items: center;
        text-align: center;
        border: 1px solid var(--gray-800);
        border-radius: 1.5rem;
        color: var(--gray-300);
        background: var(--gradient-subtle);
        box-shadow: var(--shadow-sm);
    }

    @media (min-width: 50em) {
        .mention-card {
            border-radius: 1.5rem;
            height: 9.5rem;
        }
    }
</style>
